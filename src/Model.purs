-- File auto generated by purescript-bridge! --
module Model where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import FiatGame.GameState (GameStage)
import GameType (GameType)
import Prim (Int, String)

import Prelude
import Data.Generic (class Generic, gCompare, gEq, gShow)

newtype User =
    User {
      userIdent :: String
    , userPassword :: Maybe String
    }

derive instance genericUser :: Generic User

instance showUser :: Show User where
  show = gShow
instance eqUser :: Eq User where
  eq = gEq
instance ordUser :: Ord User where
  compare = gCompare

derive instance newtypeUser :: Newtype User _


--------------------------------------------------------------------------------
_User :: Iso' User { userIdent :: String, userPassword :: Maybe String}
_User = _Newtype

--------------------------------------------------------------------------------
newtype Game =
    Game {
      gameName :: String
    , gameType :: GameType
    , gameCode :: String
    , gameStage :: GameStage
    , gameSettings :: String
    , gameState :: Maybe String
    , gameUserId :: Int
    , gameStateHash :: String
    }

derive instance genericGame :: Generic Game

instance showGame :: Show Game where
  show = gShow
instance eqGame :: Eq Game where
  eq = gEq
instance ordGame :: Ord Game where
  compare = gCompare

derive instance newtypeGame :: Newtype Game _


--------------------------------------------------------------------------------
_Game :: Iso' Game { gameName :: String, gameType :: GameType, gameCode :: String, gameStage :: GameStage, gameSettings :: String, gameState :: Maybe String, gameUserId :: Int, gameStateHash :: String}
_Game = _Newtype

--------------------------------------------------------------------------------
newtype ChatRoom =
    ChatRoom {
      chatRoomName :: String
    , chatRoomGameId :: Maybe Int
    }

derive instance genericChatRoom :: Generic ChatRoom

instance showChatRoom :: Show ChatRoom where
  show = gShow
instance eqChatRoom :: Eq ChatRoom where
  eq = gEq
instance ordChatRoom :: Ord ChatRoom where
  compare = gCompare

derive instance newtypeChatRoom :: Newtype ChatRoom _


--------------------------------------------------------------------------------
_ChatRoom :: Iso' ChatRoom { chatRoomName :: String, chatRoomGameId :: Maybe Int}
_ChatRoom = _Newtype

--------------------------------------------------------------------------------
newtype ChatMessage =
    ChatMessage {
      chatMessageMessage :: String
    , chatMessageSent :: String
    , chatMessageUserId :: Int
    , chatMessageChatRoomId :: Int
    }

derive instance genericChatMessage :: Generic ChatMessage

instance showChatMessage :: Show ChatMessage where
  show = gShow
instance eqChatMessage :: Eq ChatMessage where
  eq = gEq
instance ordChatMessage :: Ord ChatMessage where
  compare = gCompare

derive instance newtypeChatMessage :: Newtype ChatMessage _


--------------------------------------------------------------------------------
_ChatMessage :: Iso' ChatMessage { chatMessageMessage :: String, chatMessageSent :: String, chatMessageUserId :: Int, chatMessageChatRoomId :: Int}
_ChatMessage = _Newtype

--------------------------------------------------------------------------------
