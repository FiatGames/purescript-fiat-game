-- File auto generated by purescript-bridge! --
module FiatGame where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

data FutureMove a =
    FutureMove String (FiatMove a)

derive instance genericFutureMove :: Generic a => Generic (FutureMove a)


--------------------------------------------------------------------------------
_FutureMove :: forall a. Prism' (FutureMove a) { a :: String, b :: FiatMove a }
_FutureMove = prism' (\{ a, b } -> FutureMove a b) f
  where
    f (FutureMove a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
data FiatPlayer =
    FiatPlayer Int
  | System

derive instance genericFiatPlayer :: Generic FiatPlayer


--------------------------------------------------------------------------------
_FiatPlayer :: Prism' FiatPlayer Int
_FiatPlayer = prism' FiatPlayer f
  where
    f (FiatPlayer a) = Just $ a
    f _ = Nothing

_System :: Prism' FiatPlayer Unit
_System = prism' (\_ -> System) f
  where
    f System = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data FiatMove a =
    FiatMove FiatPlayer a

derive instance genericFiatMove :: Generic a => Generic (FiatMove a)


--------------------------------------------------------------------------------
_FiatMove :: forall a. Prism' (FiatMove a) { a :: FiatPlayer, b :: a }
_FiatMove = prism' (\{ a, b } -> FiatMove a b) f
  where
    f (FiatMove a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
data FiatGameState a b =
    FiatGameState a (Array (FutureMove b))

derive instance genericFiatGameState :: (Generic a, Generic b) => Generic (FiatGameState a b)


--------------------------------------------------------------------------------
_FiatGameState :: forall a b. Prism' (FiatGameState a b) { a :: a, b :: Array (FutureMove b) }
_FiatGameState = prism' (\{ a, b } -> FiatGameState a b) f
  where
    f (FiatGameState a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
data FiatMoveError =
    Invalid
  | Unauthorized
  | NotYourTurn
  | DecodeError String

derive instance genericFiatMoveError :: Generic FiatMoveError


--------------------------------------------------------------------------------
_Invalid :: Prism' FiatMoveError Unit
_Invalid = prism' (\_ -> Invalid) f
  where
    f Invalid = Just unit
    f _ = Nothing

_Unauthorized :: Prism' FiatMoveError Unit
_Unauthorized = prism' (\_ -> Unauthorized) f
  where
    f Unauthorized = Just unit
    f _ = Nothing

_NotYourTurn :: Prism' FiatMoveError Unit
_NotYourTurn = prism' (\_ -> NotYourTurn) f
  where
    f NotYourTurn = Just unit
    f _ = Nothing

_DecodeError :: Prism' FiatMoveError String
_DecodeError = prism' DecodeError f
  where
    f (DecodeError a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
