-- File auto generated by purescript-bridge! --
module FiatGame.ToClient.Types where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import FiatGame.GameState (FiatPlayer, SettingsAndState)
import Prim (String)

import Prelude
import Data.Generic (class Generic)

data Error =
    GameIsNotStarted
  | GameAlreadyStarted
  | InvalidMove
  | Unauthorized
  | NotYourTurn
  | NotEnoughPlayers
  | DecodeError String
  | FailedToInitialize String
  | GameStateOutOfDate

derive instance genericError :: Generic Error


--------------------------------------------------------------------------------
_GameIsNotStarted :: Prism' Error Unit
_GameIsNotStarted = prism' (\_ -> GameIsNotStarted) f
  where
    f GameIsNotStarted = Just unit
    f _ = Nothing

_GameAlreadyStarted :: Prism' Error Unit
_GameAlreadyStarted = prism' (\_ -> GameAlreadyStarted) f
  where
    f GameAlreadyStarted = Just unit
    f _ = Nothing

_InvalidMove :: Prism' Error Unit
_InvalidMove = prism' (\_ -> InvalidMove) f
  where
    f InvalidMove = Just unit
    f _ = Nothing

_Unauthorized :: Prism' Error Unit
_Unauthorized = prism' (\_ -> Unauthorized) f
  where
    f Unauthorized = Just unit
    f _ = Nothing

_NotYourTurn :: Prism' Error Unit
_NotYourTurn = prism' (\_ -> NotYourTurn) f
  where
    f NotYourTurn = Just unit
    f _ = Nothing

_NotEnoughPlayers :: Prism' Error Unit
_NotEnoughPlayers = prism' (\_ -> NotEnoughPlayers) f
  where
    f NotEnoughPlayers = Just unit
    f _ = Nothing

_DecodeError :: Prism' Error String
_DecodeError = prism' DecodeError f
  where
    f (DecodeError a) = Just $ a
    f _ = Nothing

_FailedToInitialize :: Prism' Error String
_FailedToInitialize = prism' FailedToInitialize f
  where
    f (FailedToInitialize a) = Just $ a
    f _ = Nothing

_GameStateOutOfDate :: Prism' Error Unit
_GameStateOutOfDate = prism' (\_ -> GameStateOutOfDate) f
  where
    f GameStateOutOfDate = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Msg a b c =
    Error FiatPlayer Error
  | Msg (SettingsAndState a b c)

derive instance genericMsg :: (Generic a, Generic b, Generic c) => Generic (Msg a b c)


--------------------------------------------------------------------------------
_Error :: forall a b c. Prism' (Msg a b c) { a :: FiatPlayer, b :: Error }
_Error = prism' (\{ a, b } -> Error a b) f
  where
    f (Error a b) = Just $ { a: a, b: b }
    f _ = Nothing

_Msg :: forall a b c. Prism' (Msg a b c) (SettingsAndState a b c)
_Msg = prism' Msg f
  where
    f (Msg a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
