-- File auto generated by purescript-bridge! --
module FiatGame.ToClient.Types where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import FiatGame.Types (FiatGameHash, FiatPlayer, GameState)
import Prim (String)

import Prelude
import Data.Generic (class Generic, gCompare, gEq, gShow)

data Error =
    GameIsNotStarted
  | GameAlreadyStarted
  | InvalidMove
  | Unauthorized
  | NotYourTurn
  | NotEnoughPlayers
  | DecodeError String
  | FailedToInitialize String
  | GameStateOutOfDate

derive instance genericError :: Generic Error

instance showError :: Show Error where
  show = gShow
instance eqError :: Eq Error where
  eq = gEq
instance ordError :: Ord Error where
  compare = gCompare


--------------------------------------------------------------------------------
_GameIsNotStarted :: Prism' Error Unit
_GameIsNotStarted = prism' (\_ -> GameIsNotStarted) f
  where
    f GameIsNotStarted = Just unit
    f _ = Nothing

_GameAlreadyStarted :: Prism' Error Unit
_GameAlreadyStarted = prism' (\_ -> GameAlreadyStarted) f
  where
    f GameAlreadyStarted = Just unit
    f _ = Nothing

_InvalidMove :: Prism' Error Unit
_InvalidMove = prism' (\_ -> InvalidMove) f
  where
    f InvalidMove = Just unit
    f _ = Nothing

_Unauthorized :: Prism' Error Unit
_Unauthorized = prism' (\_ -> Unauthorized) f
  where
    f Unauthorized = Just unit
    f _ = Nothing

_NotYourTurn :: Prism' Error Unit
_NotYourTurn = prism' (\_ -> NotYourTurn) f
  where
    f NotYourTurn = Just unit
    f _ = Nothing

_NotEnoughPlayers :: Prism' Error Unit
_NotEnoughPlayers = prism' (\_ -> NotEnoughPlayers) f
  where
    f NotEnoughPlayers = Just unit
    f _ = Nothing

_DecodeError :: Prism' Error String
_DecodeError = prism' DecodeError f
  where
    f (DecodeError a) = Just $ a
    f _ = Nothing

_FailedToInitialize :: Prism' Error String
_FailedToInitialize = prism' FailedToInitialize f
  where
    f (FailedToInitialize a) = Just $ a
    f _ = Nothing

_GameStateOutOfDate :: Prism' Error Unit
_GameStateOutOfDate = prism' (\_ -> GameStateOutOfDate) f
  where
    f GameStateOutOfDate = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Msg a b c =
    Error {
      player :: FiatPlayer
    , error :: Error
    }
  | Msg {
      hash :: FiatGameHash
    , settings :: a
    , state :: Maybe (GameState b c)
    }

derive instance genericMsg :: (Generic a, Generic b, Generic c) => Generic (Msg a b c)

instance showMsg :: (Generic a, Generic b, Generic c) => Show (Msg a b c) where
  show = gShow
instance eqMsg :: (Generic a, Generic b, Generic c) => Eq (Msg a b c) where
  eq = gEq
instance ordMsg :: (Generic a, Generic b, Generic c) => Ord (Msg a b c) where
  compare = gCompare


--------------------------------------------------------------------------------
_Error :: forall a b c. Prism' (Msg a b c) { player :: FiatPlayer, error :: Error }
_Error = prism' Error f
  where
    f (Error r) = Just r
    f _ = Nothing

_Msg :: forall a b c. Prism' (Msg a b c) { hash :: FiatGameHash, settings :: a, state :: Maybe (GameState b c) }
_Msg = prism' Msg f
  where
    f (Msg r) = Just r
    f _ = Nothing

--------------------------------------------------------------------------------
