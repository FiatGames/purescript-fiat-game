-- File auto generated by purescript-bridge! --
module FiatGame.GameState where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

data FutureMove a =
    FutureMove String a

derive instance genericFutureMove :: Generic a => Generic (FutureMove a)


--------------------------------------------------------------------------------
_FutureMove :: forall a. Prism' (FutureMove a) { a :: String, b :: a }
_FutureMove = prism' (\{ a, b } -> FutureMove a b) f
  where
    f (FutureMove a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
data FiatPlayer =
    FiatPlayer Int
  | System

derive instance genericFiatPlayer :: Generic FiatPlayer


--------------------------------------------------------------------------------
_FiatPlayer :: Prism' FiatPlayer Int
_FiatPlayer = prism' FiatPlayer f
  where
    f (FiatPlayer a) = Just $ a
    f _ = Nothing

_System :: Prism' FiatPlayer Unit
_System = prism' (\_ -> System) f
  where
    f System = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data GameState a b =
    GameState a (Array (FutureMove b))

derive instance genericGameState :: (Generic a, Generic b) => Generic (GameState a b)


--------------------------------------------------------------------------------
_GameState :: forall a b. Prism' (GameState a b) { a :: a, b :: Array (FutureMove b) }
_GameState = prism' (\{ a, b } -> GameState a b) f
  where
    f (GameState a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
