-- File auto generated by purescript-bridge! --
module FiatGame.ToServer.Types where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import FiatGame.GameState (FiatPlayer)

import Prelude
import Data.Generic (class Generic)

data Cmd a b =
    StartGame
  | UpdateSettings a
  | MakeMove b

derive instance genericCmd :: (Generic a, Generic b) => Generic (Cmd a b)


--------------------------------------------------------------------------------
_StartGame :: forall a b. Prism' (Cmd a b) Unit
_StartGame = prism' (\_ -> StartGame) f
  where
    f StartGame = Just unit
    f _ = Nothing

_UpdateSettings :: forall a b. Prism' (Cmd a b) a
_UpdateSettings = prism' UpdateSettings f
  where
    f (UpdateSettings a) = Just $ a
    f _ = Nothing

_MakeMove :: forall a b. Prism' (Cmd a b) b
_MakeMove = prism' MakeMove f
  where
    f (MakeMove a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Msg a b =
    Msg {
      player :: FiatPlayer
    , cmd :: Cmd a b
    }

derive instance genericMsg :: (Generic a, Generic b) => Generic (Msg a b)

derive instance newtypeMsg :: Newtype (Msg a b) _


--------------------------------------------------------------------------------
_Msg :: forall a b. Iso' (Msg a b) { player :: FiatPlayer, cmd :: Cmd a b}
_Msg = _Newtype

--------------------------------------------------------------------------------
